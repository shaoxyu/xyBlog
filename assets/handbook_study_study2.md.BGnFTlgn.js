import{_ as t,c as p,o,a4 as a}from"./chunks/framework.Cs8c42aK.js";const b=JSON.parse('{"title":"🔥 连八股文都不懂还指望在前端混下去么","description":"","frontmatter":{},"headers":[],"relativePath":"handbook/study/study2.md","filePath":"handbook/study/study2.md","lastUpdated":null}'),e={name:"handbook/study/study2.md"},s=a('<h1 id="🔥-连八股文都不懂还指望在前端混下去么" tabindex="-1">🔥 连八股文都不懂还指望在前端混下去么 <a class="header-anchor" href="#🔥-连八股文都不懂还指望在前端混下去么" aria-label="Permalink to &quot;🔥 连八股文都不懂还指望在前端混下去么&quot;">​</a></h1><p>🕘2024 年 7 月 12 日 星期五 天气 | 晴🌞</p><h2 id="一、-http-和-https" tabindex="-1">一、 HTTP 和 HTTPS <a class="header-anchor" href="#一、-http-和-https" aria-label="Permalink to &quot;一、 HTTP 和 HTTPS&quot;">​</a></h2><p><strong>1.http 和 https 的基本概念</strong></p><p>http: 是一个客户端和服务器端请求和应答的标准（TCP），用于从 WWW 服务器传输超文本到本地浏览器的超文本传输协议。</p><p>https:是以安全为目标的 HTTP 通道，即 HTTP 下 加入 SSL 层进行加密。其作用是：建立一个信息安全通道，来确保数据的传输，确保网站的真实性。</p><p><strong>2.http 和 https 的区别及优缺点？</strong></p><p>http 是超文本传输协议，信息是明文传输，HTTPS 协议要比 http 协议安全，https 是具有安全性的 ssl 加密传输协议，可防止数据在传输过程中被窃取、改变，确保数据的完整性(当然这种安全性并非绝对的，对于更深入的 Web 安全问题，此处暂且不表)。</p><p>http 协议的默认端口为 80，https 的默认端口为 443。</p><p>http 的连接很简单，是无状态的。https 握手阶段比较费时，会使页面加载时间延长 50%，增加 10%~20%的耗电。</p><p>https 缓存不如 http 高效，会增加数据开销。</p><p>Https 协议需要 ca 证书，费用较高，功能越强大的证书费用越高。</p><p>SSL 证书需要绑定 域名。</p><p><strong>3.https 协议的工作原理</strong></p><p>客户端在使用 HTTPS 方式与 Web 服务器通信时有以下几个步骤：</p><p>1.客户端使用 https url 访问服务器，则要求 web 服务器建立 ssl 链接。</p><p>2.web 服务器接收到客户端的请求之后，会将网站的证书（证书中包含了公钥），传输给客户端。</p><p>3.客户端和 web 服务器端开始协商 SSL 链接的安全等级，也就是加密等级。</p><p>4.客户端浏览器通过双方协商一致的安全等级，建立会话密钥，然后通过网站的公钥来加密会话密钥，并传送给网站。</p><p>5.web 服务器通过自己的私钥解密出会话密钥。</p><p>6.web 服务器通过会话密钥加密与客户端之间的通信。</p><h2 id="二、cookie、sessionstorage、localstorage-的区别" tabindex="-1">二、Cookie、sessionStorage、localStorage 的区别 <a class="header-anchor" href="#二、cookie、sessionstorage、localstorage-的区别" aria-label="Permalink to &quot;二、Cookie、sessionStorage、localStorage 的区别&quot;">​</a></h2><p><strong>1.相同点</strong></p><p>存储在客户端</p><p><strong>2.不同点</strong></p><p>1.cookie数据大小不能超过4k；sessionStorage和localStorage的存储比cookie大得多，可以达到5M+</p><p>2.cookie设置的过期时间之前一直有效；localStorage永久存储，浏览器关闭后数据不丢失除非主动删除数据；sessionStorage数据在当前浏览器窗口关闭后自动删除</p><p>3.cookie的数据会自动的传递到服务器；sessionStorage和localStorage数据保存在本地</p><h2 id="三、浏览器重绘与重排的区别" tabindex="-1">三、浏览器重绘与重排的区别？ <a class="header-anchor" href="#三、浏览器重绘与重排的区别" aria-label="Permalink to &quot;三、浏览器重绘与重排的区别？&quot;">​</a></h2><p><strong>1.重排/回流（Reflow）：当DOM的变化影响了元素的几何信息，浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做重排。表现为重新生成布局，重新排列元素。</strong></p><p><strong>2.重绘(Repaint): 当一个元素的外观发生改变，但没有改变布局,重新把元素外观绘制出来的过程，叫做重绘。表现为某些元素的外观被改变</strong></p><p>单单改变元素的外观，肯定不会引起网页重新生成布局，但当浏览器完成重排之后，将会重新绘制受到此次重排影响的部分</p><p>重排和重绘代价是高昂的，它们会破坏用户体验，并且让UI展示非常迟缓，而相比之下重排的性能影响更大，在两者无法避免的情况下，一般我们宁可选择代价更小的重绘。</p><p>『重绘』不一定会出现『重排』，『重排』必然会出现『重绘』。</p><h2 id="四、如何触发重排和重绘" tabindex="-1">四、如何触发重排和重绘？ <a class="header-anchor" href="#四、如何触发重排和重绘" aria-label="Permalink to &quot;四、如何触发重排和重绘？&quot;">​</a></h2><p><strong>任何改变用来构建渲染树的信息都会导致一次重排或重绘：</strong></p><p>1.添加、删除、更新DOM节点</p><p>2.通过display: none隐藏一个DOM节点-触发重排和重绘</p><p>3.通过visibility: hidden隐藏一个DOM节点-只触发重绘，因为没有几何变化</p><p>4.移动或者给页面中的DOM节点添加动画</p><p>5.添加一个样式表，调整样式属性</p><p>6.用户行为，例如调整窗口大小，改变字号，或者滚动。</p><h2 id="五、如何避免重绘或者重排" tabindex="-1">五、如何避免重绘或者重排？ <a class="header-anchor" href="#五、如何避免重绘或者重排" aria-label="Permalink to &quot;五、如何避免重绘或者重排？&quot;">​</a></h2><p>1.集中改变样式，不要一条一条地修改 DOM 的样式。</p><p>2.不要把 DOM 结点的属性值放在循环里当成循环里的变量。</p><p>3.为动画的 HTML 元件使用 fixed 或 absoult 的 position，那么修改他们的 CSS 是不会 reflow 的。</p><p>4.不使用 table 布局。因为可能很小的一个小改动会造成整个 table 的重新布局。</p><p>5.尽量只修改position：absolute或fixed元素，对其他元素影响不大</p>',48),r=[s];function n(i,h,l,d,c,g){return o(),p("div",null,r)}const S=t(e,[["render",n]]);export{b as __pageData,S as default};

import{_ as p,c as s,o as t,a4 as n}from"./chunks/framework.Cs8c42aK.js";const u=JSON.parse('{"title":"最常见的前端面试繁杂问题及其答案","description":"","frontmatter":{"lastUpdated":"2024-07-13","lastUpdatedText":"最后更新时间"},"headers":[],"relativePath":"handbook/study/study3.md","filePath":"handbook/study/study3.md","lastUpdated":null}'),a={name:"handbook/study/study3.md"},o=n('<h1 id="最常见的前端面试繁杂问题及其答案" tabindex="-1">最常见的前端面试繁杂问题及其答案 <a class="header-anchor" href="#最常见的前端面试繁杂问题及其答案" aria-label="Permalink to &quot;最常见的前端面试繁杂问题及其答案&quot;">​</a></h1><p>🕘2024 年 7 月 13 日 星期一 天气 | 阴⛅</p><p><strong>01、什么是事件传播？</strong></p><p>事件传播是一种机制，定义事件如何传播或穿过 DOM 树到达其目标以及随后会发生什么。</p><p><strong>02、解释 JavaScript 中“this”的工作原理</strong></p><p>在 JavaScript 中，“this”指的是函数的当前执行上下文。</p><p><strong>03、解释原型继承如何工作</strong></p><p>原型继承允许一个对象通过建立原型链来继承另一个对象的属性。</p><p><strong>04、null、未定义或未声明的变量之间有什么区别？</strong></p><p>‘null’表示故意不存在任何对象值，‘undefined’表示声明的变量没有赋值，未声明的变量根本不声明。</p><p><strong>05、什么是闭包，以及如何/为什么使用闭包？</strong></p><p>闭包是在函数返回后保持对函数中变量的访问的一种方式。闭包通常用于数据隐私、封装和创建具有持久状态的函数。</p><p><strong>06、您能否描述一下 Array.forEach() 循环和 Array.map() 方法之间的主要区别以及为什么您会选择其中一种方法？</strong></p><p>主要区别在于 Array.forEach() 迭代数组的每个元素并对每个元素执行操作，但它不返回新数组。</p><p>另一方面，Array.map() 通过将函数应用于原始数组的每个元素来创建新数组。当您想要对每个元素执行操作而不返回新数组时，您可以选择 Array.forEach() ；当您需要将数组转换为新数组时，您可以选择 Array.map() 。</p><p><strong>07、call和apply有什么区别？</strong></p><p>call 和 apply 都用于更改函数的“this”作用域。主要区别在于如何将参数传递给函数。在 call 中，后续参数是单独传递的，而 apply 期望第二个参数是一个数组，该数组被解包为被调用函数的参数。</p><p><strong>08、什么是hoisting？</strong></p><p>Hoisting是 JavaScript 在编译阶段将变量和函数声明移动到各自作用域顶部的过程。这允许在代码中声明变量和函数之前使用它们。</p><p><strong>09、描述事件冒泡</strong></p><p>事件冒泡是一种机制，其中内部元素中发生的事件通过 DOM 层次结构中的父元素传播或“冒泡”。它从最里面的元素开始，一直持续到文档级别，一路触发附加到每个父元素的事件处理程序。</p><p><strong>10、解释事件委托</strong></p><p>事件委托是一种技术，您无需将事件侦听器附加到各个元素，而是将单个事件侦听器附加到将为其子元素处理事件的父元素。当您有大量元素或动态添加元素时，此方法非常有用，因为它可以提高性能并减少内存消耗。</p><p><strong>11、CORS 代表什么以及它解决什么问题？</strong></p><p>CORS 代表跨源资源共享。它是一种机制，允许从资源来源域之外的另一个域请求网页上的资源。</p><p>CORS 解决了浏览器强制执行的同源策略，该策略可防止脚本出于安全原因向不同域发出请求。</p><p><strong>12、Prop 和 State 有什么区别？</strong></p><p>props 和 state 都是 React 组件中使用的普通 JavaScript 对象。props 从父组件传递到子组件，用于组件内不会更改的数据。另一方面，状态在组件本身内进行管理，并且可以使用 setState 方法进行更新。props 是不可变的，而 state 可以更新。</p><p><strong>13、解释一下 function Person(){}、var person = Person() 和 var person = new Person() 之间的区别</strong></p><p>function Person(){} 正在声明一个函数。</p><p>var person = Person() 将 Person 函数的引用分配给 person 变量。</p><p>var person = new Person() 使用“new”关键字创建 Person 类的新实例。</p><p><strong>14、剩余运算符和扩展运算符有什么区别？</strong></p><p>剩余运算符（例如，…args）允许您将不定数量的参数表示为数组。当使用可变参数函数或处理可变数量的函数参数时，它非常有用。</p><p>扩展运算符（例如，...array）允许您将数组扩展为单个元素。当您想要将数组作为单独的参数传递给函数或基于现有数组创建新数组时，它会很方便。</p><p><strong>15、解释let、var和const之间的区别</strong></p><p>let 和 const 是在 ES6 中引入的，而 var 从 JavaScript 的早期版本开始就可用了。</p><p>let 和 const 具有块作用域，这意味着它们仅限于声明它们的块（例如，在大括号内）。var 具有函数作用域，这意味着它可以在声明它的整个函数中访问。</p><p>const 与 let 类似，但用于在初始分配后不应重新分配的变量。</p><p><strong>16、“重置”和“规范化”CSS 有什么区别？你会选择哪个，为什么？</strong></p><p>重置 CSS 会删除每个元素的所有样式，包括边距、填充和其他属性。它提供了一个干净的状态，并确保不同浏览器之间的启动样式一致。</p><p>规范化 CSS 的目的是通过应用一组预定义的样式，使元素在浏览器中呈现一致。它为样式提供了一致的基线，并有助于减少浏览器的不一致。</p><p>重置 CSS 还是规范化 CSS 之间的选择取决于项目的要求和偏好。重置使您可以完全控制样式，但需要重新设置每个元素的样式。</p><p>规范化提供了更一致的基础，但可能需要额外的自定义才能满足您的设计要求。</p><p><strong>17、描述块格式化上下文 (BFC) 及其工作原理</strong></p><p>块格式上下文 (BFC) 是网页视觉 CSS 渲染的一部分。它是块级盒子布局发生的区域，并且浮动体彼此交互。</p><p>当某些 CSS 属性（例如浮动、位置、溢出和显示）应用于元素时，就会创建 BFC。BFC 有助于实现可预测且一致的布局，特别是在处理复杂的定位和浮动元素时。</p><p><strong>18、匿名函数的典型用例是什么？</strong></p><p>匿名函数，也称为函数表达式，是在没有指定名称的情况下定义的函数。它们通常用于需要一个函数作为另一个函数的参数的情况或创建自调用函数时。</p><p>匿名函数允许更简洁的代码，并且可以通过使函数定义更接近其用法来帮助提高代码可读性。</p><p><strong>19、“属性”和“属性”有什么区别？</strong></p><p>属性用于定义 HTML 元素的特征，例如 id 和类。另一方面，属性会更新 DOM 元素本身，例如其类型或值。</p><p><strong>20、解释同步函数和异步函数之间的区别。</strong></p><p>同步函数逐步执行，每一行都等待前一行完成。异步函数允许在上一步完成之前执行到下一步。异步函数通常用于非阻塞操作。</p><p><strong>21、什么是事件循环？调用堆栈和任务队列有什么区别？</strong></p><p>事件循环负责利用单个线程执行 JavaScript 中的操作。它使用调用堆栈来跟踪当前正在执行的操作，并使用任务队列来管理异步任务。调用堆栈按照后进先出的顺序处理函数，而任务队列则按照先进先出的顺序处理。</p><p><strong>22、集合与数组有什么区别？</strong></p><p>集合不能包含重复值，而数组可以。当唯一性很重要时，集合很有用。</p><p><strong>23、你能举一个解构对象或数组的例子吗？</strong></p><p>解构允许您将对象或数组中的值提取到不同的变量中。例如:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const { firstName, lastName } = person;</span></span>\n<span class="line"><span>const [firstItem, secondItem] = array;</span></span></code></pre></div><p><strong>24、你能举一个使用 ES6 模板文字生成字符串的例子吗？</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const name = ‘John’;</span></span>\n<span class="line"><span>const greeting = `Hello ${name}!`;</span></span></code></pre></div><p><strong>25、代码风格 linting 工具的目的是什么？</strong></p><p>代码风格 linting 工具（例如 ESLint）有助于强制实施一致的编码风格并捕获潜在的错误或代码异味。它提高了代码质量、可读性和可维护性。</p><p><strong>26、您能解释一下从您输入网站 URL 到其在屏幕上完成加载的整个过程吗？会发生什么？</strong></p><p>当您输入网站的 URL 时，浏览器会执行一系列步骤，包括 DNS 解析、建立 TCP 连接、发送 HTTP 请求、接收 HTTP 响应、解析和渲染网站内容以及加载其他资源（如果需要）。</p>',67),r=[o];function e(g,i,c,l,d,h){return t(),s("div",null,r)}const _=p(a,[["render",e]]);export{u as __pageData,_ as default};
